// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AirdropCreated extends ethereum.Event {
  get params(): AirdropCreated__Params {
    return new AirdropCreated__Params(this);
  }
}

export class AirdropCreated__Params {
  _event: AirdropCreated;

  constructor(event: AirdropCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class IdentifierChanged extends ethereum.Event {
  get params(): IdentifierChanged__Params {
    return new IdentifierChanged__Params(this);
  }
}

export class IdentifierChanged__Params {
  _event: IdentifierChanged;

  constructor(event: IdentifierChanged) {
    this._event = event;
  }

  get methodId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get identifier(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SDFactory extends ethereum.SmartContract {
  static bind(address: Address): SDFactory {
    return new SDFactory("SDFactory", address);
  }

  airdrops(param0: BigInt): Address {
    let result = super.call("airdrops", "airdrops(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_airdrops(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("airdrops", "airdrops(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  airdropsLength(): BigInt {
    let result = super.call("airdropsLength", "airdropsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_airdropsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "airdropsLength",
      "airdropsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkIdentity(account: Address, methodId: string): boolean {
    let result = super.call(
      "checkIdentity",
      "checkIdentity(address,string):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromString(methodId)]
    );

    return result[0].toBoolean();
  }

  try_checkIdentity(
    account: Address,
    methodId: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkIdentity",
      "checkIdentity(address,string):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromString(methodId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAirdrop(name: string, token: Address, identifier: Address): Address {
    let result = super.call(
      "createAirdrop",
      "createAirdrop(string,address,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(identifier)
      ]
    );

    return result[0].toAddress();
  }

  try_createAirdrop(
    name: string,
    token: Address,
    identifier: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createAirdrop",
      "createAirdrop(string,address,address):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(identifier)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAirdrop(param0: string): Address {
    let result = super.call("getAirdrop", "getAirdrop(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toAddress();
  }

  try_getAirdrop(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall("getAirdrop", "getAirdrop(string):(address)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIdentifier(param0: string): Address {
    let result = super.call(
      "getIdentifier",
      "getIdentifier(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_getIdentifier(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getIdentifier",
      "getIdentifier(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vip(): Address {
    let result = super.call("vip", "vip():(address)", []);

    return result[0].toAddress();
  }

  try_vip(): ethereum.CallResult<Address> {
    let result = super.tryCall("vip", "vip():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AirdropsLengthCall extends ethereum.Call {
  get inputs(): AirdropsLengthCall__Inputs {
    return new AirdropsLengthCall__Inputs(this);
  }

  get outputs(): AirdropsLengthCall__Outputs {
    return new AirdropsLengthCall__Outputs(this);
  }
}

export class AirdropsLengthCall__Inputs {
  _call: AirdropsLengthCall;

  constructor(call: AirdropsLengthCall) {
    this._call = call;
  }
}

export class AirdropsLengthCall__Outputs {
  _call: AirdropsLengthCall;

  constructor(call: AirdropsLengthCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAirdropCall extends ethereum.Call {
  get inputs(): CreateAirdropCall__Inputs {
    return new CreateAirdropCall__Inputs(this);
  }

  get outputs(): CreateAirdropCall__Outputs {
    return new CreateAirdropCall__Outputs(this);
  }
}

export class CreateAirdropCall__Inputs {
  _call: CreateAirdropCall;

  constructor(call: CreateAirdropCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get identifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateAirdropCall__Outputs {
  _call: CreateAirdropCall;

  constructor(call: CreateAirdropCall) {
    this._call = call;
  }

  get _airdrop(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetIdentifierCall extends ethereum.Call {
  get inputs(): SetIdentifierCall__Inputs {
    return new SetIdentifierCall__Inputs(this);
  }

  get outputs(): SetIdentifierCall__Outputs {
    return new SetIdentifierCall__Outputs(this);
  }
}

export class SetIdentifierCall__Inputs {
  _call: SetIdentifierCall;

  constructor(call: SetIdentifierCall) {
    this._call = call;
  }

  get methodId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get identifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetIdentifierCall__Outputs {
  _call: SetIdentifierCall;

  constructor(call: SetIdentifierCall) {
    this._call = call;
  }
}

export class SetVipCall extends ethereum.Call {
  get inputs(): SetVipCall__Inputs {
    return new SetVipCall__Inputs(this);
  }

  get outputs(): SetVipCall__Outputs {
    return new SetVipCall__Outputs(this);
  }
}

export class SetVipCall__Inputs {
  _call: SetVipCall;

  constructor(call: SetVipCall) {
    this._call = call;
  }

  get _vip(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVipCall__Outputs {
  _call: SetVipCall;

  constructor(call: SetVipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
